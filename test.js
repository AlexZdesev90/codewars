// Вопрос 1:   Что такое рекурсия? 
// A : Вызов функцией самой себя +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// B : Прохождение по циклу с вызовом разных функций
// C : Прохождение по циклу с вызовом одной и той же функции
// D : передача одной функции в другую функцию

// let obj = {
//     "0": 1,
//     0: 2
// };

// console.log(obj["0"] + obj[0])

// Вопрос 2:   Что будет выведено в консоль?  
// A : 2
// B : 3
// C : 4 +++++++++++++++++++++++++++++++++++++++++
// D : В коде ошибка

// Вопрос 3:   "Какими из перечесленных способов можно добавить
// обработчик события на элемент:
// 1. element.click(<обработчик>)
// 2.element.onclick(<обработчик>)++++++++++++++++
// 3.element.addEventListener('click', <обработчик>)
// 4.element.subscribeToEvent('click', <обработчик>)++++++++

// Вопрос 4:   Существует ли возможность на странице, полученной с одного домена отправить запрос на другой домен?
// A : Да, можно воспользоваться CORS и указать на стороне сервера дополнительные заголовки HTTP запроса ++++++++++++++++++++++++++++++
// B : Да, необходимо на стороне клиента сделать ajax запрос с указанием другого домена
// C : Нет, по причине SOP не существует возможности отправить на другой домен запрос
// D : Да, но можно отправить только GET запрос, так как он считается безопасным" 

// Вопрос 5:   Чему равняется контекст в момент вызова функции через оператор new? 
// A : Первому переданному аргументу
// B : Последнему переданному аргументу
// C : Пустому новому объекту+++++++++++++
// D : Контекст не определен

// Вопрос 6:   Что такое семантическая верстка? 
// A : Подход к написанию HTML с учетом семантики тегов
// B : Подход к написанию HTML с учетом внешнего вида страницы
// C : Подход к написанию HTML, предполагающий логичную и последовательную иерархию страницы
// D : Подход к написанию HTML  с учетом семантики тегов, предполагающий логичную и последовательную иерархию страницы++++++++++++++++++++++++++

// Вопрос 7:   Каким способом можно найти на странице элемент имеющий идентификатор 'test' 

// A : document.getElementById('test')

// B : document.findById('test')

// C : document.querySelector('test')

// D : document.queryById('#id')

// document.getElementById('test').style.backgroundColor = "green"
// document.querySelector('test').style.backgroundColor = "red"

// Вопрос 8:   Отличие sessionStorage от LocalStorage 
// A : sessionStorage отправляет данные на сервер при каждом запросе
// B : область видимости localStorage распространяется на все вкладки страницы, sessionStorage только на одну
// C : localStorage может использоваться для хранения файлов
// D : localStorage позволяет хранить больший объем данных чем sessionStorage++++++++++++++++++++

// const message = [
//     { name: "JS", isA: true, members: 100 },
//     { name: "JS", isA: true, members: 200 },
//     { name: "JS", isA: true, members: 300 }
// ];

// const membersOnActive = m => m.filter(me => me.isA)
// .reduce((sum, mes) => sum + mes.members, 0)

// console.log(membersOnActive(message))
//++++++++++++++++++++++++

// Вопрос 10:   Как активировать срабатывание обработчиков при всплытии события? 

// A : При подписке на событие нужно третьим аргументов передать флаг true

// B : Нужно делать подписку на специальный тип событий, например: 'bubling:click'

// C : Никак, это поведение по умолчанию

// D : При подписке на событие нужно третьим аргументом передать флаг false


// Вопрос 10:   Как активировать срабатывание обработчиков при всплытии события? 

// A : При подписке на событие нужно третьим аргументов передать флаг true

// B : Нужно делать подписку на специальный тип событий, например: 'bubling:click'

// C : Никак, это поведение по умолчанию

// D : При подписке на событие нужно третьим аргументом передать флаг false++++++++++++++++++++++++++++++++++++++++++++++++


// Вопрос 11:   Какой из четырех способов приведек к ожидаемому результату? 

// A : 1
// B : 2
// C : 3
// D : 4++++++++++++
// const o = { x: 10}

// const obj2 = Object.create(o)
// console.log(obj2.x)

// Вопрос 12:   Что будет выведено в консоль? 
// A : 10
// B : 20
// C : 30
// D : 40

// var x = 140;

// function bar(f){
//     var x = 30;
//     f()
// }


// function foo(){
//     console.log(x)
// }
// foo.x = 20;
// bar.x = 40;

// bar(foo)//140



// Вопрос 13:   Что будет выведено в консоль?  
// A : 0
// B : 1
// C : 2++++++++++++++++++++++++++++++++
// D : 3

// console.log(0 || 1 && 2 || 3)

// Вопрос 14:   Что произойдет при исполнении этого кода? 
// A : 60 в консоле
// B : Ошибка при задании новых свойств объекту
// C : Ошибка применения метода reverse()
// D : 40 в консоле

// const obj = {
//     x: 10,
//     y: 20,
// }
// const prop = Object
// .keys(obj)
// .reverse()
// .join('')

// obj.xy = 30
// obj.yx = 40
// obj.x10y20 = 50
// obj.y20x10 = 60

// const result = obj[prop]
// console.log(result)//40

// Вопрос 15:   Что такое HTMLCollection? 

// A : Массив DOM элементов

// B : Массив DOM  элементов, предоставляющий дополнительные методы для работы коллекцией

// C : Объект с числовыми ключами содержащий DOM элементы и предоставляющий методы для работы с ними как с массивом

// D : Объект с числовыми ключами содержащий DOM элементы и предлставляющий дополнительные методы для работы с коллекцией+++++++++++++++++++


// var a = "hello"
// function b(){
//     console.log(a)
//     var a = "world"
//     console.log(a)
// }

// b()


// Вопрос 16:   Что будет выведено в косноль? 

// A : hello, hello

// B : undefined, world+++++++++++++

// C : hello, world

// D : world, world


// Вопрос 17:   Что будет в консоле после исполнения кода? 

// A : [5, 7, 4]

// B : [7, 4]++++++++++++++++++++

// C : [7, 9, 4]

// D : [4, 7]


// Вопрос 18:   Каким значением css свойства display можно скрыть элемент? 

// A : none++++++++++++++++++++++++

// B : hide

// C : no-visible

// D : off-stage



// Вопрос 19:   Что произойдет во время исполнения этого кода? 

// A : Ошибка объявления свойства "b" у примитива "a"

// B : В консоле увидим объект {b: 10}

// C : В консоле увидим 10.+++++++++++++++

// D : В консоле увидим undefined.

// let a = 10
// a.b = 10
// console.log(a)

// Вопрос 20:   Каким образом используя только css можно задать стили, которые применятся при наведении на элемент? 

// A : использовать псевдокласс hover

// B : использовать псевдоэлемент hover

// C : использовать css хук onHover

// D : в чистом css нет возможности задать стили для 

// Вопрос 21:   Чем отличие между методами call и apply? 

// A : call принимает аргументы целевой функции через запятую, а apply массивом++++++++++++++++

// B : apply в отличии от call применяет аргументы к функции

// C : call в отличии от apply просто вызывает функцию без аргументов

// D : call используется для функций, а apply для объектов


// Вопрос 22:   Что будет выведено в консоль?  

// A : 0,1,2,3,4,5,6,7,8,9

// B : 10 раз 10++++++++++++++++++

// C : 1,2,3,4,5,6,7,8,9,10

// D : Ничего

// for(var i = 0; i < 10; i++) {
//     setTimeout(function f(){
//         console.log(i)
//     });
// }


// Вопрос 23:   В каком случае / случаях может произойти фриз страницы? 

// A : Выполняется бесконечный цикл в синхронном коде

// B : callback внутри setTimeout бесконечно вызывает setTimeout

// C : Внутри промиса бесконечно создаются другие промисы

// D : В случаях 1 и 3

// Вопрос 24:   Какое будет положение у блока с id="child" внутри блока id="parent"? 

// A : блок child будет в центре

// B : блок child будет вертикально по центру, а горизонтально слева

// C : блок child будет горизонтально по центру, а вертикально в верху+++++++++++++++++++++++++++

// D : блок child будет в левом верхнем углу

// Вопрос 25:   Какой отступ будет между блоками? 

// A : Отступ 15px

// B : Отступ 5px

// C : Отступ 10px+++++++++++++++++++

// D : Зависит от браузера

{/* <div style="margin-bottom: 5px">b1</div>
    <div style="margin-top: 10px">b2</div> */}


//     Вопрос 27:   Какие виды состояния есть у promise? 

// A : pending, fullfiled, rejected+++++++++++++++

// B : promise не имеет состояния

// C : success, failure

// D : waiting, fullfiled, failed



// Вопрос 28:   Что такое замыкание? 

// A : это трансформация функций таким образом, чтобы они принимали аргументы не как f(a, b, c), а как f(a)(b)(c)

// B : приём, который позволяет выполнять несколько методов последовательно, а не вызывать их по отдельности

// C : это функция вместе со всеми внешними переменными, которые ей доступны++++++++++++++++++

// D : Паттерн программрования


// Вопрос 29:   Как расшифровывается HTTP? 

// A : Протокол передачи гипертекста+++++

// B : Протокол частичной передачи текста

// C : Личная передача гипертекста

// D : Практичная передача части текста

// Вопрос 30:   Какой из четырех способов приведек к ожидаемому результату? 

// A : 1

// B : 2+++++

// C : 3

// D : 4





// console.log(document.cookie)